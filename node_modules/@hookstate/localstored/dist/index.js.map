{"version":3,"file":"index.js","sources":["../src/localstorage.ts"],"sourcesContent":["import { ExtensionFactory, State } from '@hookstate/core';\r\n\r\nexport interface StoreEngine {\r\n    getItem: (key: string) => Promise<string | null> | string;\r\n    setItem: (key: string, value: string) => Promise<void> | void;\r\n    removeItem: (key: string) => Promise<void> | void;\r\n}\r\n\r\nexport interface LocalStored { }\r\n\r\nexport function localstored<S, E>(options?: {\r\n    key?: string,\r\n    engine?: StoreEngine,\r\n    initializer?: () => Promise<S>\r\n}): ExtensionFactory<S, E, LocalStored> {\r\n    return () => {\r\n        let key: string;\r\n        let serializer: (s: State<S, E>) => () => string;\r\n        let deserializer: (s: State<S, E>) => (v: string) => void;\r\n        let stateAtRoot: State<S, E>\r\n        let storageEngine: StoreEngine | Storage = options?.engine || localStorage;\r\n\r\n        return {\r\n            onInit: (state, extensionMethods) => {\r\n                stateAtRoot = state;\r\n                if (options?.key === undefined) {\r\n                    if (extensionMethods['identifier'] === undefined) {\r\n                        throw Error('State is missing Identifiable extension')\r\n                    }\r\n                    key = extensionMethods['identifier'](state)\r\n                } else {\r\n                    key = options.key\r\n                }\r\n                if (extensionMethods['serialize'] !== undefined) {\r\n                    serializer = extensionMethods['serialize']\r\n                } else {\r\n                    serializer = (s) => () => JSON.stringify(s.get({ noproxy: true }))\r\n                }\r\n                if (extensionMethods['deserialize'] !== undefined) {\r\n                    deserializer = extensionMethods['deserialize'](state)\r\n                } else {\r\n                    deserializer = (s) => (v) => s.set(JSON.parse(v))\r\n                }\r\n\r\n                // here it is synchronous, but most storages would be async\r\n                // this is supported too, as the state.set can be really set asynchronously\r\n                const response = storageEngine.getItem(key);\r\n                Promise.resolve(response).then(persisted => {\r\n                    if (persisted) {\r\n                        // persisted state exists\r\n                        deserializer(state)(persisted); // this one sets the state value as well\r\n                    } else if (options?.initializer) {\r\n                        options.initializer().then(s => {\r\n                            state.set(s);\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            onSet: (s) => {\r\n                if (s.promised || s.error !== undefined) {\r\n                    const response = storageEngine.removeItem(key);\r\n                    Promise.resolve(response).then(() => { });\r\n                } else {\r\n                    // save the entire state from the root\r\n                    // smarter implementations could implement partial state saving,\r\n                    // which would save only the nested state set (parameter `s` in onSet)\r\n                    const response = storageEngine.setItem(key, serializer(stateAtRoot)());\r\n                    Promise.resolve(response).then(() => { });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}